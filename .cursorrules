## 项目规则（Cursor 专用）

本仓库为 Supabase Edge Functions（Deno）最小可用框架（MVP）。请严格遵循以下规则与用法，确保生成代码与现有约定一致。

### 总览
- 运行时：Supabase Edge Runtime（Deno）。
- 目标：提供统一的边缘函数入口封装（CORS 预检、错误统一、服务端 Supabase 客户端注入、可选强制认证）。
- 仅保留一个入口工具：`serveEdgeFunction`。

### 唯一入口：serveEdgeFunction
- 文件：`supabase/functions/_shared/edgeFunction.ts`
- 能力：
  - 自带 `Deno.serve`（非 Deno 环境回退 `addEventListener('fetch')`）。
  - 自动处理 CORS 预检（`OPTIONS`）。
  - 自动注入 Service Role 客户端：`supabaseService`。
  - 强制认证可选：通过 `options.requireAuth` 控制是否要求登录。
  - 统一错误返回结构：`{ error: { message } }`，且错误响应附带 `corsHeaders`。

#### 用法 1：无需登录（推荐默认）
```ts
import { serveEdgeFunction } from "../_shared/edgeFunction.ts";
import { corsHeaders } from "../_shared/cors.ts";

serveEdgeFunction(async ({ req, supabaseService }) => {
  const { searchParams } = new URL(req.url);
  const name = searchParams.get("name") ?? "World";
  return new Response(JSON.stringify({ message: `Hello, ${name}!` }), {
    headers: { ...corsHeaders, "Content-Type": "application/json" },
  });
}, { requireAuth: false });
```

#### 用法 2：要求登录
```ts
import { serveEdgeFunction } from "../_shared/edgeFunction.ts";
import { corsHeaders } from "../_shared/cors.ts";

serveEdgeFunction(async ({ req, supabaseService, user }) => {
  // user 一定存在，未登录请求会在包装层直接返回错误 JSON
  return new Response(JSON.stringify({ message: `Hello (auth), ${user.email}!` }), {
    headers: { ...corsHeaders, "Content-Type": "application/json" },
  });
}, { requireAuth: true });
```

### 认证与用户
- 认证辅助在 `supabase/functions/_shared/auth.ts`：
  - `requireAuth(supabaseService, req)`：强登录校验，不通过会抛错；由 `serveEdgeFunction` 捕获并统一返回错误结构。
  - `authenticateUser(...)`：仅在内部用于“可选登录”场景；业务侧不要直接调用，统一走 `serveEdgeFunction` 的 `requireAuth` 选项。
- Token 来源：`Authorization: Bearer <token>` 或 `x-supabase-auth`。

### Supabase 客户端（服务角色）
- 获取方式：`const supabaseService = getSupabaseClient()`（由 `serveEdgeFunction` 自动注入）。
- 位置：`supabase/functions/_shared/supabaseClient.ts`。
- 环境变量：`SUPABASE_URL`、`SUPABASE_SERVICE_ROLE_KEY`（部署端配置）。
- 重要：Service Role 客户端仅用于受信任的 Edge Functions，严禁在前端暴露。

### CORS 处理
- 统一跨域头 `corsHeaders` 位于 `supabase/functions/_shared/cors.ts`。
- 业务成功响应必须显式合并：`{ ...corsHeaders, "Content-Type": "application/json" }`。
- 预检与错误响应由 `serveEdgeFunction` 兜底。

### 错误处理约定
- 业务失败请直接 `throw new Error('描述性错误')`。
- `serveEdgeFunction` 会捕获异常并返回：
```json
{ "error": { "message": "..." } }
```

### 目录与命名
- 共享代码目录：`supabase/functions/_shared/`。
  - 仅允许使用 `serveEdgeFunction`；禁止新增或恢复 `createEdgeFunction`。
  - 注入对象命名固定为 `supabaseService`（避免与前端 supabase 客户端混淆）。
- 业务函数位于 `supabase/functions/<function-name>/index.ts`。
- 若函数需要强登录，在 `serveEdgeFunction` 的第二个参数显式写 `{ requireAuth: true }`；无需登录则写 `{ requireAuth: false }`。

### 示例清单
- 无需登录：`supabase/functions/hello-world/index.ts`
- 需要登录：`supabase/functions/hello-world-auth/index.ts`

### 本地开发与部署（参考）
- 本地开发（举例）：
  - `supabase functions serve hello-world`（或指定函数目录）
- 部署（举例）：
  - `supabase functions deploy hello-world`
- 注意：确保在运行环境配置好 `SUPABASE_URL` 与 `SUPABASE_SERVICE_ROLE_KEY`。

### 生成代码时请遵守
- 只使用 `serveEdgeFunction`；不要直接调用 `Deno.serve`。
- 成功响应必须带 `corsHeaders` 与 `Content-Type: application/json`。
- 若 `requireAuth: true`，处理函数签名必须包含 `user`；否则不要引用 `user`。
- 优先使用解构形式 `({ req, supabaseService, user })` 或 `({ req, supabaseService })`。
- 避免将 Service Role Key 相关信息泄露到响应中。


